isaac_ros_visual_slam
https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_visual_slam

インストール
手順
https://nvidia-isaac-ros.github.io/getting_started/index.html
reqirementはJetson Orin JetPack 6.0

xavierは6系未対応なので5系でインストール。issoc rosのtagも時期を合わせインストール
wayback machineで上記手順サイトの最も古いやつを参照した。

#diskイメージ
https://developer.nvidia.com/embedded/jetpack-sdk-51
5.1.2, 5.1.1はxavierが起動しなかったので5.1

#メモ：リポジトリ　以下ブランチのバージョンは5.1の時期に合わせたもの
git clone --branch v2.1.0 --depth 1 https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common.git
git clone --branch v2.1.0 --depth 1 https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_visual_slam.git

# Compute setup -----
https://web.archive.org/web/20240226214451/https://nvidia-isaac-ros.github.io/getting_started/hardware_setup/compute/index.html

Jetson Platforms
Install Jetpack including the nvidia-container package.

After boot, confirm that you have installed Jetpack 5.1.2 by running the following command. Confirm that the output has the terms R35 (release), REVISION: 4.1.

cat /etc/nv_tegra_release
Run the following command to set the GPU and CPU clock to max. See Maximizing Jetson Performance for more details.

sudo /usr/bin/jetson_clocks
Run the following command to set the to power to MAX settings. See Power Mode Controls for more details.

sudo /usr/sbin/nvpmodel -m 0
Add your user to the docker group.

sudo usermod -aG docker $USER
newgrp docker
Setup Docker.

From the official Docker install instructions (here), install the docker-buildx-plugin.

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to Apt sources:
echo \
"deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt install docker-buildx-plugin

# Developer Environment Setup -----
Restart Docker:

sudo systemctl daemon-reload && sudo systemctl restart docker
Install Git LFS to pull down all large files:

sudo apt-get install git-lfs
git lfs install --skip-repo
Create a ROS 2 workspace for experimenting with Isaac ROS:

For Jetson setup with SSD as optional storage:

mkdir -p /ssd/workspaces/isaac_ros-dev/src
echo "export ISAAC_ROS_WS=/ssd/workspaces/isaac_ros-dev/" >> ~/.bashrc
source ~/.bashrc
mkdir -p ~/workspaces/isaac_ros-dev/src
echo "export ISAAC_ROS_WS=${HOME}/workspaces/isaac_ros-dev/" >> ~/.bashrc
source ~/.bashrc
We expect to use the ISAAC_ROS_WS environmental variable to refer to this ROS 2 workspace directory, in the future.

isaac_ros_visual_slam
Source code on GitHub.

Quickstart -----
https://web.archive.org/web/20240226202321/https://nvidia-isaac-ros.github.io/repositories_and_packages/isaac_ros_visual_slam/isaac_ros_visual_slam/index.html#quickstart
メモ：run_dev.shはターミナルからnvida ngcにログインしておく。ログインにはAPIキーの発行が必要

Set up your development environment by following the instructions here.

Note: ${ISAAC_ROS_WS} is defined to point to either /ssd/workspaces/isaac_ros-dev/ or ~/workspaces/isaac_ros-dev/.

Clone isaac_ros_common and this repository under ${ISAAC_ROS_WS}/src.

下記クローンは不要。jetpack 5.1に合わせたバージョンでclone済み。
cd ${ISAAC_ROS_WS}/src
git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common.git
git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_visual_slam.git
[Terminal 1] Launch the Docker container

cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
 ./scripts/run_dev.sh ${ISAAC_ROS_WS}
[Terminal 1] Install this package’s dependencies.

sudo apt-get install -y ros-humble-isaac-ros-visual-slam
Run the following launch files in the current terminal (Terminal 1):

ros2 launch isaac_ros_visual_slam isaac_ros_visual_slam.launch.py
[Terminal 2] Attach another terminal to the running container for RViz2

Attach another terminal to the running container for RViz2.

cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
 ./scripts/run_dev.sh ${ISAAC_ROS_WS}
From this second terminal, run RViz2 to display the output:

rviz2 -d src/isaac_ros_visual_slam/isaac_ros_visual_slam/rviz/default.cfg.rviz
If you are SSHing in from a remote machine, the RViz2 window should be forwarded to your remote machine.

[Terminal 3] Attach the 3rd terminal to start the rosbag

cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
 ./scripts/run_dev.sh ${ISAAC_ROS_WS}
Run the rosbag file to start the demo.

ros2 bag play src/isaac_ros_visual_slam/isaac_ros_visual_slam/test/test_cases/rosbags/small_pol_test/
Result:

RViz should start displaying the point clouds and poses like below:



